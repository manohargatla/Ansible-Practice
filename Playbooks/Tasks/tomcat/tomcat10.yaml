## Write a playbook to install tomcat10 application 
--- 
- name: install tomcat10 server
  hosts: tomcat
  become: yes
  tasks:
    - name: check if the playbook is being executed on supported os
      ansible.builtin.fail:
        msg: "this playbook is designed to run only on ubuntu"
      when: ansible_facts['distribution'] != "Ubuntu"
    - name: install java-11  ## install java 
      ansible.builtin.apt:
        name: "{{ java_version }}"
        update_cache: yes
        state: present
    - name: Create a group 
      ansible.builtin.group:
        name: "{{ group }}"
        state: present
    - name: Create a user 
      ansible.builtin.user:
        name: "{{ user }}"
        create_home: yes
        group: "{{ group }}"
        home: "{{ home_dir }}"
        shell: "{{ shell }}"
    - name: Download tomcat tar file # install tomcat
      ansible.builtin.get_url:
        url: "https://www-eu.apache.org/dist/tomcat/tomcat-{{ tomcat_main_ver }}/v{{ tomcat_ver }}/bin/apache-tomcat-{{ tomcat_ver }}.tar.gz"
        dest: "/tmp/apache-tomcat-{{ tomcat_ver }}.tar.gz"
    - name: flush_handlers
      meta: flush_handlers
    - name: find if the tomcat is already extracted
      ansible.builtin.stat:
        path: "{{ home_dir }}/apache-tomcat-{{ tomcat_ver }}/LICENSE"
      register: license_info
    - name: untar the the tomcat tar file
      ansible.builtin.unarchive:
        src: "/tmp/apache-tomcat-{{ tomcat_ver }}.tar.gz"
        dest: "{{ home_dir }}"
        remote_src: yes
      when: not  license_info.stat.exists
      notify:
        - Add execute permissions for shell scripts
    - name: create a symbolic link
      ansible.builtin.file:
        src: "{{ home_dir }}/apache-tomcat-{{ tomcat_ver }}"
        dest: "{{ home_dir }}/latest"
        state: link
      notify:
        - Add execute permissions for shell scripts
    - name: Changing group to tomcat
      ansible.builtin.file:
        path: "{{ home_dir }}"
        group: "{{ group }}"
        owner: "{{ user }}"
        recurse: yes
        state: directory
    - name: copy the tomcat service file
      ansible.builtin.template:
        src: tomcat.service.j2
        dest: /etc/systemd/system/tomcat.service
      notify:
        - start tomcat service 
    - name: Configuring Tomcat users
      ansible.builtin.template:
        src: tomcat-users.xml.j2
        dest: "{{ home_dir }}/latest/conf/tomcat-users.xml"
        owner: "{{ user }}"
        group: "{{ group }}"
      notify:
        - start tomcat service
    - name: access to all for manager app
      ansible.builtin.template:
        src: context.xml.j2
        dest: "{{ home_dir }}/latest/webapps/manager/META-INF/context.xml"
        owner: "{{ user }}"
        group: "{{ group }}"
      notify:
        - start tomcat service
    - name: access to all for host manager app
      ansible.builtin.template:
        src: context.xml.j2
        dest: "{{ home_dir }}/latest/webapps/host-manager/META-INF/context.xml"
        owner: "{{ user }}"
        group: "{{ group }}"
      notify:
        - start tomcat service
  handlers:
    - name: Add execute permissions for shell scripts
      ansible.builtin.shell:
        cmd: "chmod +x {{ home_dir }}/latest/bin/*.sh"   
    - name: daemon-reload
      ansible.builtin.systemd:
        daemon_reload: yes
    - name: start tomcat service
      ansible.builtin.systemd:
        name: tomcat
        enabled: yes
        state: restarted